def COLOR_MAP = [
    'SUCCESS' = 'good',
    'FAILURE' = 'danger', 

]

pipeline {
	  agent any
	  tools  {
	    maven  "maven"
	    jdk  "java"
	  }

	  stages{
	    stage('FETCH CODE'){
	       steps{
	          git branch :'vp-rem',url :'https://github.com/devopshydclub/vprofile-repo.git'
	       }
	    }
	    stage('BUILD'){
	       steps{
	          sh "mvn install -Dskiptests" }
	       post {
	         success{
	            echo 'ARCHIVING THE ARTIFACTS'
	            archiveArtifacts artifacts: "**/*.war"
	         }
	       }
	    }
	    stage('TEST'){
	       steps{
	          sh "mvn test"
	       }
	    }
	    stage('CHECKSTYLING'){
	       steps{
	          sh "mvn checkstyle:checkstyle"
	       }
	    }
	    stage('SONARANALYSIS'){
	       steps{
	         withSonarQubeEnv('sonarserver'){
	           sh "mvn sonar:sonar"
	         }
	       }
	    }
	    stage('QUALITYGATE'){
	       steps{
	         timeout(time:1,unit:'MINUTES'){
	          waitForQualityGate abortPipeline:true     	  	
	         }
	         
	       }
	    }
	    stage('NEXUS'){
	       steps{     	          nexusArtifactUploader(
        nexusVersion: 'nexus3',
        protocol: 'http',
        nexusUrl: '44.192.60.217:8081',
        groupId: 'com.exam',
        version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
        repository: 'vprofile',
        credentialsId: 'nexusid',
        artifacts: [
            [artifactId: 'vapp' ,
             classifier: '',
             file: 'target/vprofile-v2.war' ,
             type: 'war']
        ]
     )
	      	

	       }
	    }

	  }

	  post{
	     always{
	     echo 'Slack Notifications.'
            slackSend channel: '#devops',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
	     }
	  }

}

